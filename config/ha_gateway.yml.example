# Whether or not requests should need to supply HMAC headers in order
# to be processed. If this is set to false, any schmuck can access
# this server.
require_hmac_signatures: false

# The secret to use when generating/validating HMAC signatures.
hmac_secret: cakeisdelicious

# You'll have to fill this out to use SmartThings integration features. 
smartthings:
  # OAuth credentials. To get these, you'll have to create a SmartApp.
  client_id: deadbeef
  client_secret: hunter2
  
# Used to construct URLs of the site served by HaGateway. E.g. for OAuth 
# callbacks
site_location: http://localhost:8000

# Path for file used to store persistent data.
persistence_path: config/persistence.yml

# Lights are assumed to be RGB and support on/off, level, and RGB color.
lights:
  leds:
    driver: ledenet
    params:
      # There are a couple of ways you can specify which device you'd like
      # to control:
      #   1. Specify no params. Control an arbitrary (maybe the only?) LEDENET
      #      device on your network.
      #   2. Specify a hardware address. ha_gateway will attempt to resolve
      #      the host from the hw addr using a discovery protocol. This is
      #      preferable if you don't have a hostname or static IP for the
      #      LEDENET device.
      #   3. Specify a host directly.
      hw_addr: 00:00:00:00:00:00
      host: ledenet1
  living_room:
    driver: milight
    params:
      host: milight1

      # This defines which "group" of lights are being controlled.
      group: 1

      # I had intermittent issues where some proper subset of the bulbs in a
      # group respond to commands. This setting repeats each command sent to
      # the bridge (and therefore bulbs) the provided number of times.
      repeat_packets: 10

  # Combine devices with composite driver:
  all_lights:
    driver: composite
    params:
      # Use this many parallel workers to execute commands on components. For
      # perfect parallelism, use a number of workers equal to the number of
      # components. Defaults to 1, meaning commands are executed serially.
      parallelism: 2

      # The list below are each references to other drivers already defined.
      components:
        - leds
        - living_room
        
  # Uses the API exposed by this project:
  #   https://github.com/sidoh/esp8266_milight_hub
  # To control MiLight bulbs.
  esp8266_milight:
    driver: esp8266_milight
    params:
      host: esp8266-milight
      device_id: 0x0001
      group: 1
      username: abc123
      password: hunter2

# Switches support on/off
switches:
  # Control a Bravia TV.
  downstairs_tv:
    driver: bravtroller_switch
    params:
      host: bravia1

  # Define a custom driver that does nothing when switched on, but sends a
  # UPnP "stop" command when turned off.
  upstairs_tv:
    driver: demux
    params:
      delegates:
        "off":
          driver: upnp_switch
          params:
            uuid: uuid:<uuid>
            service: urn:schemas-upnp-org:service:AVTransport:1
            actions:
              "off":
                method: Stop
                args:
                  InstanceID: 0
        "on":
          driver: noop
          
  # Send commands to this IR blaster REST server: 
  # https://github.com/sidoh/esp8266_ir_blaster
  livingroom_fan:
    driver: ir_blaster_switch
    params:
      url: 'http://my-ir-blaster/ir'
      
      # This driver has separate parameters for the on and off commands in case
      # there are different IR codes or desired behaviors for the two actions.
      "on":
        params: &FAN_IR_PARAMS 
          type: raw
          
          # This is how fast the LED is flashing while "on" (in KHz). 38 KHz is 
          # pretty common.
          pwm_frequency: 38
          
          # Raw data. Encoded as microsecond delays between pulses. You can get
          # this data from making a `GET /ir` request to the REST server and
          # pressing the button you wish to emulate.
          data: [ 
            750,1800,750,1800,2000,550,2000,550,750,1800,750,1800,750,1800,
            2000,550,750,1800,2000,550,2000,550,750,1800,750,1800,750,1800,
            2000,550,750,1800,750,1800,2000,550,2000,550,750,1800,750,1800,
            750,1800,2000,550,750 
          ]
          
      # Notice that "off" uses the same IR parameters as "on". This example
      # covers the case where the device has a single on/off button that cycles
      # through different modes/speeds. In this case, "off" will send the same
      # IR code three times with 500ms delays inbetween.
      "off":
        repeat: 3
        delay_ms: 500
        params:
          <<: *FAN_IR_PARAMS

# Foscam Cameras when using the /camera endpoint.
cameras:
  # This will, for example, make the snapshot URL for this camera
  # /camera/mycamera1/snapshot.jpg
  mycamera1:
    driver: foscam98
    params:
      host: camera1.mynetwork.net
      username: myusername
      password: mypassword

  mycamera2:
    driver: foscam98
    params:
      host: camera2.mynetwork.net
      username: myusername
      password: mypassword
      
# Listeners are generally things that listen for events and allow you to run
# actions when they're picked up. For example, the arp_probe driver allows you
# to detect when a device with a certain hardware address joins the network.
# Useful for Amazon Dash buttons.
listeners:
  amazon_dash_button1:
    # The arp_probe driver listens for ARP queries. Devices will send out ARP 
    # queries when they join a network. This is the typical hack used to 
    # re-purpose Amazon Dash buttons. You could also use it to detect, 
    # for example, when your smartphone connects to your network.
    driver: arp_probe
    
    params:
      # Hardware address of the device to listen for.
      hw_addr: aa:bb:cc:dd:ee:ff
      
      # Optional: Which interface to listen on. Defaults to whatever pcap 
      # decides.
      # interface: eth0
      
      # Optional: milliseconds that ARP queries from the same device are 
      # considered duplicates. Defaults to 0
      # dedup_threshold: 5000
      
      events:
        probe_received:
          # Fires an HTTP request when the event is received.
          http:
            method: PUT
            
            # URL called will be filled in with site_location. Requests will be
            # signed with security credentials.
            url: /lights/all_lights
            
            params:
              status: 'off'
              
  amazon_dash_button2:
    driver: arp_probe
    params:
      hw_addr: bb:cc:dd:ee:ff:aa
      events:
        probe_received:
          http:
            method: GET
            url: /smartthings/routines/good_night
          
  # This driver relies on having a dedicated wireless device that supports 
  # monitor mode. It's adapted from this example:
  #
  #   https://github.com/ridiculousfish/one-second-dash
  #
  # In order for it to function, you first need to create a virtual monitor
  # device. Use ./bin/create_monitor_interface for that.
  #
  # The extra setup buys you a few things:
  #   1. Can kill the network used to set the dash buttons up. They will then
  #      fail to connect, and won't try to order anything.
  #
  #   2. Latency is a lot more favorable. Approximately ~1s compared to ~5s with
  #      arp_probe.
  amazon_dash_button3:
    driver: tcpdump_monitor
    params:
      # Hardware address of the dash button.
      hw_addr: cc:dd:ee:ff:aa:bb
      
      # Name of the virtual monitor interface. If you used 
      # ./bin/create_monitor_interface, this will be the second argument you
      # passed that script.
      interface: DashMonitor
      
      # There will always be 5-10 packets each time you press the button. You'll
      # probably need to have this set to something reasonable.
      dedup_threshold: 5000
      
      events:
        probe_received:
          http:
            method: PUT
            url: /switches/upstairs_tv
            params:
              status: 'off'
