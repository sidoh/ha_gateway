# Whether or not requests should need to supply HMAC headers in order
# to be processed. If this is set to false, any schmuck can access
# this server.
require_hmac_signatures: false

# The secret to use when generating/validating HMAC signatures.
hmac_secret: cakeisdelicious

# You'll have to fill this out to use SmartThings integration features. 
smartthings:
  # OAuth credentials. To get these, you'll have to create a SmartApp.
  client_id: deadbeef
  clienet_secret: hunter2
  
# Used to construct URLs of the site served by HaGateway. E.g. for OAuth 
# callbacks
site_location: http://localhost:8000

# Path for file used to store persistent data.
persistence_path: config/persistence.yml

# Lights are assumed to be RGB and support on/off, level, and RGB color.
lights:
  leds:
    driver: ledenet
    params:
      # There are a couple of ways you can specify which device you'd like
      # to control:
      #   1. Specify no params. Control an arbitrary (maybe the only?) LEDENET
      #      device on your network.
      #   2. Specify a hardware address. ha_gateway will attempt to resolve
      #      the host from the hw addr using a discovery protocol. This is
      #      preferable if you don't have a hostname or static IP for the
      #      LEDENET device.
      #   3. Specify a host directly.
      hw_addr: 00:00:00:00:00:00
      host: ledenet1
  living_room:
    driver: milight
    params:
      host: milight1

      # This defines which "group" of lights are being controlled.
      group: 1

      # I had intermittent issues where some proper subset of the bulbs in a
      # group respond to commands. This setting repeats each command sent to
      # the bridge (and therefore bulbs) the provided number of times.
      repeat_packets: 10

  # Combine devices with composite driver:
  all_lights:
    driver: composite
    params:
      # Use this many parallel workers to execute commands on components. For
      # perfect parallelism, use a number of workers equal to the number of
      # components. Defaults to 1, meaning commands are executed serially.
      parallelism: 2

      # The list below are each references to other drivers already defined.
      components:
        - leds
        - living_room

# Switches support on/off
switches:
  # Control a Bravia TV.
  downstairs_tv:
    driver: bravtroller_switch
    params:
      host: bravia1

  # Define a custom driver that does nothing when switched on, but sends a
  # UPnP "stop" command when turned off.
  upstairs_tv:
    driver: demux
    params:
      delegates:
        "off":
          driver: upnp_switch
          params:
            uuid: uuid:<uuid>
            service: urn:schemas-upnp-org:service:AVTransport:1
            actions:
              "off":
                method: Stop
                args:
                  InstanceID: 0
        "on":
          driver: noop

# Foscam Cameras when using the /camera endpoint.
cameras:
  # This will, for example, make the snapshot URL for this camera
  # /camera/mycamera1/snapshot.jpg
  mycamera1:
    driver: foscam98
    params:
      host: camera1.mynetwork.net
      username: myusername
      password: mypassword

  mycamera2:
    driver: foscam98
    params:
      host: camera2.mynetwork.net
      username: myusername
      password: mypassword
      
# Listeners are generally things that listen for events and allow you to run
# actions when they're picked up. For example, the arp_probe driver allows you
# to detect when a device with a certain hardware address joins the network.
# Useful for Amazon Dash buttons.
listeners:
  amazon_dash_button1:
    driver: arp_probe
    params:
      hw_addr: aa:bb:cc:dd:ee:ff
      events:
        pressed:
          http:
            method: PUT
            # URL called will be filled in with site_location. Requests will be
            # signed with security credentials.
            url: /lights/all_lights
            params:
              status: off
